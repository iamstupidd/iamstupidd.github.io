<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LaTex公式显示</title>
    <url>/2020/08/07/LaTex%E5%85%AC%E5%BC%8F%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; Hexo的Latex显示处理，我用的是next 6.13.4。主要是网上的教程大多是换一个渲染引擎，其实完全没有必要。Next还是很强大的。</p>
<a id="more"></a>

<ol>
<li>首先是主题下面的设置文件(${\small ~\themes\next\_config.yml}$) math部分设置如下。</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="comment"># Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在需要latex公式处理的md文章中添加 ${\small mathjax: true}$ </p>
</li>
<li><p>结果如图</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="1.png"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">1. </font>Latex公式支持</div> </center></li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>日常维护</tag>
      </tags>
  </entry>
  <entry>
    <title>Linear Algebra--1</title>
    <url>/2020/09/01/Linear-Algebra-1/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 线性代数其实是从多变量的线性方程组引入的，多变量的线性方程组 ${\small A\textit{x} = b}$ 怎么样去理解，从 ${\small Row}$ 的方向去理解，就是超平面的交集，从 ${\small Column}$ 的角度看就是 ${\small A}$ 的 ${\small Column}$ 的 ${\small \textit{x}}$ 中每个变量的线性组合。然后解这个方程组的话，最朴素的想法就是消元嘛，然后消元这个过程又可以使用矩阵乘法来表示，于是就引入了矩阵的乘法以及乘法的法则。矩阵的乘法（ ${\small AB}$ ）从点积的角度去理解，就只能理解到它的计算法则；从 ${\small Row}$ 的角度看， ${\small AB}$ 的每一个 ${\small Row}$ 就是 ${\small B}$ 的 ${\small Row}$ 的线性组合；从 ${\small column}$ 的角度看， ${\small AB}$ 的每一个 ${\small column}$ 就是 ${\small A}$ 的 ${\small column}$ 的线性组合；从 ${\small column * Row}$ 看就能看出来，分块进行消元法的实质，从而引入了矩阵的逆。</p>
<a id="more"></a>

<h1 id="线性代数的引入"><a href="#线性代数的引入" class="headerlink" title="线性代数的引入"></a><font color="#0x66CD77">线性代数的引入</font></h1><h3 id="1-线性方程组"><a href="#1-线性方程组" class="headerlink" title="1   线性方程组"></a><font color="#E6CEAC">1   线性方程组</font></h3><h4 id="1-1-从-small-Row-来看"><a href="#1-1-从-small-Row-来看" class="headerlink" title="1.1 从 ${\small Row}$ 来看"></a><font color="#F4606C">1.1 从 ${\small Row}$ 来看</font></h4><ul>
<li>二维：</li>
</ul>
<p><img src="2.png" alt="2"></p>
<ul>
<li>三维：</li>
</ul>
<p><img src="1.png" alt="1"></p>
<p>​    所以从行的来看就是超平面的一个交集。<br>$$<br>A\textit{x} = \begin{bmatrix}\ (row_1)\cdot\textit{x} \ (row_2)\cdot\textit{x} \(row_3)\cdot\textit{x}\ \end{bmatrix}<br>$$</p>
<h4 id="1-2-从-small-Column-来看"><a href="#1-2-从-small-Column-来看" class="headerlink" title="1.2 从 ${\small Column}$ 来看"></a><font color="#F4606C">1.2 从 ${\small Column}$ 来看</font></h4><p>$$<br>{A\textit{x} = x_1\cdot\textit{Column_1} + x_2\cdot(\textit{Column_2}) + x_3\cdot(\textit{Column_3})}<br>$$</p>
<p>先标量乘法，后向量加法。</p>
<h3 id="2-矩阵乘法"><a href="#2-矩阵乘法" class="headerlink" title="2  矩阵乘法"></a><font color="#E6CEAC">2  矩阵乘法</font></h3><h4 id="2-1-从点乘来看"><a href="#2-1-从点乘来看" class="headerlink" title="2.1 从点乘来看"></a><font color="#F4606C">2.1 从点乘来看</font></h4><p><img src="3.png" alt="3"></p>
<p><font color="#F4606C">2.2 从 ${\small Row}$ 来看</font><br>$$<br>\begin{bmatrix} row_1 \ \cdots \ row_n \end{bmatrix} \cdot B = \begin{bmatrix} row_1\ of\ AB \ \cdots \ row_n\ of\ AB \end{bmatrix}<br>$$</p>
<h4 id="2-3-从-small-Column-来看"><a href="#2-3-从-small-Column-来看" class="headerlink" title="2.3 从 ${\small Column}$ 来看"></a><font color="#F4606C">2.3 从 ${\small Column}$ 来看</font></h4><p>$$<br>A\cdot\textit{x} = A[b_1 \cdots b_n] = [Ab_1 \cdots Ab_n]<br>$$</p>
<p><font color="#F4606C">2.4 从 ${\small Column \cdot Row}$ 来看</font></p>
<p><img src="4.png" alt="4"></p>
<h4 id="2-5-从-small-Block-Elimination-来看"><a href="#2-5-从-small-Block-Elimination-来看" class="headerlink" title="2.5 从 ${\small Block\ Elimination}$ 来看"></a><font color="#F4606C">2.5 从 ${\small Block\ Elimination}$ 来看</font></h4><p><img src="5.png" alt="5"></p>
]]></content>
      <tags>
        <tag>冲刺研究生</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linear Algebra--2</title>
    <url>/2020/09/02/Linear-Algebra-2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>NetWork--DAY1</title>
    <url>/2020/08/17/NetWork-DAY1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>OS--DAY1</title>
    <url>/2020/08/09/OS-DAY1/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 今天的进度有点慢，操作系统复习了一些 9 / 68，SLAM看了一篇中文综述，但是看不太懂，加油加油，PKU，我的梦想，我愿意为你奋斗！</p>
<a id="more"></a>

<h2 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a><font color="#F4606C">课程总结</font></h2><p><img src="1.png" alt="1"></p>
<h2 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a><font color="#F4606C">可能的问题</font></h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a><font color="#E6CEAC">1.1</font></h3><ul>
<li>简述一下冯诺依曼结构</li>
<li>简述一下图灵机</li>
<li>操作系统是什么，阐述一下</li>
<li>具体说明一下定义中的三条信息</li>
</ul>
<h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a><font color="#E6CEAC">1.2</font></h3><ul>
<li>操作系统有哪些特征，并简要说明</li>
<li>其中最基本的特征是什么？</li>
</ul>
<h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a><font color="#E6CEAC">1.3</font></h3><ul>
<li>讲一下操作系统的发展历史吧</li>
<li>阐述一下不同时期操作系统的优缺点</li>
</ul>
<h3 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a><font color="#E6CEAC">1.4</font></h3><ul>
<li>最近微内核很火，简单介绍一下微内核和强内核的定义以及优缺点吧</li>
<li>举几个例子</li>
<li>核心态和用户态的区别</li>
<li>指令的分类和阐述</li>
</ul>
<h3 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a><font color="#E6CEAC">1.5</font></h3><ul>
<li>简单讲一下中断吧（意义，分类，分类的举例）</li>
<li>用户态 &lt;—-&gt; 核心态的转换方式</li>
<li>外中断的处理过程</li>
</ul>
<h3 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a><font color="#E6CEAC">1.6</font></h3><ul>
<li>简单叙述一下系统调用（定义，意义，分类，过程）</li>
<li>与库函数之间的关系</li>
</ul>
<h3 id="2-7"><a href="#2-7" class="headerlink" title="2.7"></a><font color="#E6CEAC">2.7</font></h3><ul>
<li>简单说一下对进程的理解（定义，进程实体，组织方式）</li>
<li>进程有哪些特点</li>
</ul>
]]></content>
      <tags>
        <tag>冲刺研究生</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>OS--DAY2</title>
    <url>/2020/08/15/OS-DAY2/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 昨天加今天早上疯狂看，终于把操作系统看完了 ${68/68}$ ,感觉还是比较体系的。这篇博客是为了把除了上次的所有问题总结一下，然后写到这里，并且把答案写上去。另外还有一个总结博客，主要是把所有的知识串联起来。并且会说。</p>
<a id="more"></a>

<h2 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a><font color="#F4606C">可能的问题</font></h2><h3 id="2-8"><a href="#2-8" class="headerlink" title="2.8"></a><font color="#E6CEAC">2.8</font></h3><ul>
<li>进程有哪些状态，五状态模型具体阐述一下（状态，转换条件）</li>
</ul>
<h3 id="2-9"><a href="#2-9" class="headerlink" title="2.9"></a><font color="#E6CEAC">2.9</font></h3><ul>
<li>进程的状态是怎么进行切换的，具体的实现（包括 创建 / 撤销 / 唤醒 / 阻塞 / 切换） 的原语。</li>
</ul>
<h3 id="2-10"><a href="#2-10" class="headerlink" title="2.10"></a><font color="#E6CEAC">2.10</font></h3><ul>
<li>进程的通信方式有哪些，各自有什么优缺点。</li>
<li>为什么缓冲区（管道）没有写满就不可以读,…？</li>
</ul>
<h3 id="2-11"><a href="#2-11" class="headerlink" title="2.11"></a><font color="#E6CEAC">2.11</font></h3><ul>
<li>为什么说线程是轻量级的进程（组成的不同，切换的开销，资源共享，并发）</li>
<li>线程的分类 —&gt; 多线程模型（优缺点）</li>
<li>线程的组成</li>
</ul>
<h3 id="2-12"><a href="#2-12" class="headerlink" title="2.12"></a><font color="#E6CEAC">2.12</font></h3><ul>
<li>处理机调度的三个层次（定义）</li>
<li>进程七状态模型（状态名称，切换条件）</li>
</ul>
<h3 id="2-13"><a href="#2-13" class="headerlink" title="2.13"></a><font color="#E6CEAC">2.13</font></h3><ul>
<li>讲一下进程调度和进程切换的区别</li>
<li>什么情况下不能进程调度，什么情况下需要进程调度？</li>
<li>临界区简单说一下理解（分类，定义，与进程调度的关系）</li>
<li>进程调度的分类</li>
</ul>
<h3 id="2-14"><a href="#2-14" class="headerlink" title="2.14"></a><font color="#E6CEAC">2.14</font></h3><ul>
<li>进程调度算法的评价标准有哪些？（定义，计算）</li>
</ul>
<h3 id="2-15"><a href="#2-15" class="headerlink" title="2.15"></a><font color="#E6CEAC">2.15</font></h3><ul>
<li>进程调度算法的分类（定义，优缺点，抢占式 / 非抢占式）<ul>
<li>FCFS</li>
<li>SJF</li>
<li>SRTN</li>
<li>HRRN</li>
</ul>
</li>
</ul>
<h3 id="2-16"><a href="#2-16" class="headerlink" title="2.16"></a><font color="#E6CEAC">2.16</font></h3><ul>
<li>适合交互式的进程调度算法<ul>
<li>时间片轮转</li>
<li>优先级调度</li>
<li>多级反馈队列</li>
</ul>
</li>
</ul>
<h3 id="2-17"><a href="#2-17" class="headerlink" title="2.17"></a><font color="#E6CEAC">2.17</font></h3><ul>
<li>什么是同步，什么是互斥</li>
<li>逻辑上进程互斥的实现</li>
<li>进程互斥的原则</li>
</ul>
<h3 id="2-18"><a href="#2-18" class="headerlink" title="2.18"></a><font color="#E6CEAC">2.18</font></h3><p>四种进程互斥的软件实现方法（算法细则，算法优缺点）</p>
<ul>
<li>单标志检查法</li>
<li>双标志先检查法</li>
<li>双标志后检查法</li>
<li>peterson算法</li>
</ul>
<h3 id="2-19"><a href="#2-19" class="headerlink" title="2.19"></a><font color="#E6CEAC">2.19</font></h3><p>进程互斥的硬件实现算法（算法实现及优缺点）</p>
<ul>
<li>中断屏蔽方法</li>
<li>TestAndSet指令</li>
<li>Swap指令</li>
</ul>
<h3 id="2-20"><a href="#2-20" class="headerlink" title="2.20"></a><font color="#E6CEAC">2.20</font></h3><p>信号量的分类（算法细则，</p>
<ul>
<li>整型信号量</li>
<li>记录型信号量（默认）</li>
</ul>
<h3 id="2-21"><a href="#2-21" class="headerlink" title="2.21"></a><font color="#E6CEAC">2.21</font></h3><p>信号量机制实现进程的控制</p>
<ul>
<li>互斥</li>
<li>同步</li>
<li>前驱关系</li>
</ul>
<h3 id="2-22-2-26"><a href="#2-22-2-26" class="headerlink" title="2.22 - 2.26"></a><font color="#E6CEAC">2.22 - 2.26</font></h3><p>几种复杂的互斥同步问题</p>
<ul>
<li>生产者消费者（各自进程伪码，死锁可能原因）</li>
<li>多生产者多消费者（各自进程伪码，死锁可能原因，缓冲区大小为1时mutex可不存在的分析）</li>
<li>吸烟者问题【单生产者多消费者】（各自进程伪码）</li>
<li>读者写者问题（简单实现，解决写者饿死）</li>
<li>哲学家进餐问题（解决死锁的三种思路及伪码）</li>
</ul>
<h3 id="2-27"><a href="#2-27" class="headerlink" title="2.27"></a><font color="#E6CEAC">2.27</font></h3><p>管程的定义，特征，如何实现互斥和同步，synchronized</p>
<h3 id="2-28"><a href="#2-28" class="headerlink" title="2.28"></a><font color="#E6CEAC">2.28</font></h3><ul>
<li><p>死锁定义，必要条件，处理方式</p>
</li>
<li><p>说说和饥饿，死循环的区别</p>
</li>
</ul>
<h3 id="2-29"><a href="#2-29" class="headerlink" title="2.29"></a><font color="#E6CEAC">2.29</font></h3><p>预防死锁发生的静态策略（破坏四个必要条件）</p>
<p>具体操作方法，优缺点</p>
<h3 id="2-30"><a href="#2-30" class="headerlink" title="2.30"></a><font color="#E6CEAC">2.30</font></h3><p>预防死锁发生之避免死锁（安全序列，不安全状态）===&gt;&gt; 银行家算法(算法步骤，数据结构)</p>
<h3 id="2-31"><a href="#2-31" class="headerlink" title="2.31"></a><font color="#E6CEAC">2.31</font></h3><p>死锁的检测【资源分配图】（算法步骤）和解决（三种方法）</p>
<h3 id="3-32"><a href="#3-32" class="headerlink" title="3.32"></a><font color="#E6CEAC">3.32</font></h3><p>逻辑地址和物理地址说一下【三种装入方式】【三种连接方式】</p>
<h3 id="3-33"><a href="#3-33" class="headerlink" title="3.33"></a><font color="#E6CEAC">3.33</font></h3><p>内存管理主要是管理内存的哪些方面？</p>
<h3 id="3-34"><a href="#3-34" class="headerlink" title="3.34"></a><font color="#E6CEAC">3.34</font></h3><p>内存的扩充技术【前两者的区别】</p>
<ul>
<li>覆盖（定义，实现，缺点）</li>
<li>交换（定义，应该在外存（磁盘）的什么位置保存被换出的进程？ 什么时候应该交换？应该换出哪些进程？）</li>
<li>虚拟存储</li>
</ul>
<h3 id="3-35-3-36"><a href="#3-35-3-36" class="headerlink" title="3.35   - -  3.36"></a><font color="#E6CEAC">3.35   - -  3.36</font></h3><p>内存的连续分配方式</p>
<ul>
<li>单一连续分配（定义，优缺点）</li>
<li>固定分区分配（定义，优缺点）</li>
<li>动态分区分配（数据结构，四种动态分区匹配算法（怎么分配），优缺点，怎么回收）</li>
</ul>
<p>具体讲一下四种算法的算法思想，分区排列顺序，优点，缺点</p>
<h3 id="3-37-—-3-38"><a href="#3-37-—-3-38" class="headerlink" title="3.37 — 3.38"></a><font color="#E6CEAC">3.37 — 3.38</font></h3><p>离散内存分配之基本分页存储</p>
<ul>
<li>数据结构：页表【大小，内容】</li>
<li>地址变换算法</li>
</ul>
<h3 id="3-39"><a href="#3-39" class="headerlink" title="3.39"></a><font color="#E6CEAC">3.39</font></h3><p>加上快表的分页存储，联想寄存器【TLB， translation    lookaside    buffer】</p>
<ul>
<li>如何转换并熟练计算</li>
</ul>
<h3 id="3-40"><a href="#3-40" class="headerlink" title="3.40"></a><font color="#E6CEAC">3.40</font></h3><p>两级页表的优点</p>
<ul>
<li><p>数据结构：页目录表</p>
</li>
<li><p>地址变换算法</p>
</li>
</ul>
<h3 id="3-41"><a href="#3-41" class="headerlink" title="3.41"></a><font color="#E6CEAC">3.41</font></h3><p>基本分段存储管理</p>
<ul>
<li>数据结构：段表【组成，长度】</li>
<li>地址转换算法</li>
<li>与分页的区别</li>
</ul>
<h3 id="3-42"><a href="#3-42" class="headerlink" title="3.42"></a><font color="#E6CEAC">3.42</font></h3><p>段页式管理</p>
<ul>
<li>数据结构：段表【组成，长度】，页表【组成】</li>
<li>地址转换算法</li>
<li>优点</li>
</ul>
<h3 id="3-43"><a href="#3-43" class="headerlink" title="3.43"></a><font color="#E6CEAC">3.43</font></h3><p>虚拟内存</p>
<ul>
<li>定义</li>
<li>特征</li>
<li>实现【请求分页管理，页面置换算法】</li>
</ul>
<p>32位系统最多可有多少个进程？</p>
<h3 id="3-44"><a href="#3-44" class="headerlink" title="3.44"></a><font color="#E6CEAC">3.44</font></h3><p>请求分页管理机制</p>
<ul>
<li>数据结构：页表【组成】</li>
<li>缺页中断【页面置换算法】</li>
</ul>
<h3 id="3-45"><a href="#3-45" class="headerlink" title="3.45"></a><font color="#E6CEAC">3.45</font></h3><p>页面置换算法【算法原理，优缺点】：最佳置换算法；FIFO【Belady 异常】；CLOCK；改进型CLOCK；LRU</p>
<p><em>好的页面置换算法应该追求更少的缺页率</em></p>
<h3 id="3-46"><a href="#3-46" class="headerlink" title="3.46"></a><font color="#E6CEAC">3.46</font></h3><p>页面分配</p>
<p>固定/可变分配</p>
<p>局部/全局分配</p>
<p>驻留集/工作集</p>
<p>内存抖动原因及解决</p>
<h3 id="4-47"><a href="#4-47" class="headerlink" title="4.47"></a><font color="#E6CEAC">4.47</font></h3><p>文件管理包括哪些方面</p>
<h3 id="4-48"><a href="#4-48" class="headerlink" title="4.48"></a><font color="#E6CEAC">4.48</font></h3><p>文件的内部逻辑结构</p>
<p>顺序文件：链式存储/顺序存储，串结构/顺序结构，变长/定长</p>
<p>索引</p>
<p>索引顺序</p>
<p>多级索引</p>
<h3 id="4-49"><a href="#4-49" class="headerlink" title="4.49"></a><font color="#E6CEAC">4.49</font></h3><p>文件目录</p>
<ul>
<li>数据结构：文件控制块</li>
<li>目录结构：单级目录，两级目录，多级目录，无环图目录（共享），索引节点</li>
</ul>
<h3 id="4-50-—-4-51"><a href="#4-50-—-4-51" class="headerlink" title="4.50 — 4.51"></a><font color="#E6CEAC">4.50 — 4.51</font></h3><p>文件的物理结构都有哪些方式，各有什么好处和缺点</p>
<h3 id="4-52"><a href="#4-52" class="headerlink" title="4.52"></a><font color="#E6CEAC">4.52</font></h3><p>空闲块的表示，分配与回收</p>
<h3 id="4-53"><a href="#4-53" class="headerlink" title="4.53"></a><font color="#E6CEAC">4.53</font></h3><p>文件的基本操作【系统调用】的主要种类和流程</p>
<h3 id="4-54"><a href="#4-54" class="headerlink" title="4.54"></a><font color="#E6CEAC">4.54</font></h3><p>文件的共享分类</p>
<p>对应的linux命令</p>
<h3 id="4-55"><a href="#4-55" class="headerlink" title="4.55"></a><font color="#E6CEAC">4.55</font></h3><p>文件的不同保护方式</p>
<p>linux的访问控制命令</p>
<h3 id="4-56"><a href="#4-56" class="headerlink" title="4.56"></a><font color="#E6CEAC">4.56</font></h3><p>文件的层次结构，并阐述每一层的功能接口</p>
<h3 id="5-57"><a href="#5-57" class="headerlink" title="5.57"></a><font color="#E6CEAC">5.57</font></h3><p>磁盘，磁道，扇区，柱面，盘面</p>
<p>磁盘的物理地址为什么是那三个顺序？</p>
<h3 id="5-58"><a href="#5-58" class="headerlink" title="5.58"></a><font color="#E6CEAC">5.58</font></h3><p>磁盘读写时间包括？</p>
<p>减少寻找时间的算法种类和优缺</p>
<h3 id="5-59"><a href="#5-59" class="headerlink" title="5.59"></a><font color="#E6CEAC">5.59</font></h3><p>减少延迟时间的方法</p>
<h3 id="5-60"><a href="#5-60" class="headerlink" title="5.60"></a><font color="#E6CEAC">5.60</font></h3><p>磁盘的初始化，计算机开机过程，坏道管理</p>
<p>为什么要有bootloader</p>
<h3 id="6-61-—-6-68"><a href="#6-61-—-6-68" class="headerlink" title="6.61 — 6.68"></a><font color="#E6CEAC">6.61 — 6.68</font></h3><p>I/O控制方式分类优缺</p>
<p>I/O的层次结构</p>
<p>缓冲区,SPOOLing</p>
]]></content>
      <tags>
        <tag>冲刺研究生</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>OS--DAY3</title>
    <url>/2020/08/24/OS-DAY3/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>冲刺研究生</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>bug修正记录</title>
    <url>/2020/08/03/bug%E4%BF%AE%E6%AD%A3%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 所有的编译器比赛期间的bug记录</p>
<a id="more"></a>

<p>图着色ppt: <a href="https://www.cs.cmu.edu/afs/cs/academic/class/15745-s16/www/lectures/">https://www.cs.cmu.edu/afs/cs/academic/class/15745-s16/www/lectures/</a></p>
<h2 id="1-彻底修复指令8位循环右移两位限制-add-sub-mov-和-栈中寻址限制-ldr-str"><a href="#1-彻底修复指令8位循环右移两位限制-add-sub-mov-和-栈中寻址限制-ldr-str" class="headerlink" title="1.  彻底修复指令8位循环右移两位限制(add,sub,mov) 和 栈中寻址限制(ldr,str)"></a>1.  彻底修复指令8位循环右移两位限制(add,sub,mov) 和 栈中寻址限制(ldr,str)</h2><h2 id="2-溢出"><a href="#2-溢出" class="headerlink" title="2. 溢出"></a>2. 溢出</h2><h2 id="3-codegen-cpp-bl-指令的dst和src"><a href="#3-codegen-cpp-bl-指令的dst和src" class="headerlink" title="3. codegen .cpp bl 指令的dst和src"></a>3. codegen .cpp bl 指令的dst和src</h2>]]></content>
      <categories>
        <category>Compiler</category>
        <category>Competition</category>
        <category>Optimization</category>
        <category>Compiler</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>九推复习计划</title>
    <url>/2020/08/09/%E4%B9%9D%E6%8E%A8%E5%A4%8D%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 之前一直在想为什么996工作的人一直在抱怨，我们上课不也是很长时间么。现在才知道，真的很累，剩下的时间只想娱乐，不想复习，提升自己。但是，我的九推已经近在眼前了，所以我一定要抓紧时间复习专业课和我的数学课，组织自己的语言，加油加油，Fighting Fighting Go !!! </p>
<a id="more"></a>

<h2 id="每日任务"><a href="#每日任务" class="headerlink" title="每日任务"></a>每日任务</h2><p>七点前，阅读一篇英语短文 500词左右，熟读，并快速翻译</p>
<p><font color="#7799ff">配套资料</font>:</p>
<p>c++：<a href="https://visualstudiomagazine.com/articles/2016/10/01/default-arguments-and-overloading.aspx">https://visualstudiomagazine.com/articles/2016/10/01/default-arguments-and-overloading.aspx</a></p>
<p>网络：<a href="https://www.sciencedirect.com/journal/computer-networks/special-issues">https://www.sciencedirect.com/journal/computer-networks/special-issues</a></p>
<p><a href="https://biztechmagazine.com/software">https://biztechmagazine.com/software</a></p>
<p>运动一个小时</p>
<p>整理房间20min</p>
<h2 id="九推计划-–-2020-08-09"><a href="#九推计划-–-2020-08-09" class="headerlink" title="九推计划 – 2020/08/09"></a>九推计划 – 2020/08/09</h2><p><font color="#ff0000">所有时间提前三天,SLAM作为学习后的甜点</font></p>
<p><S><font color="#ff7700">3 Day</font>: 我打算先把自己的研究方向的综述<strong>英文</strong>读个<strong>三篇</strong>，<strong>中文</strong>读个<strong>两篇</strong>。高翔slam14讲<strong>前后端</strong>听完，并做笔记。</S></p>
<p><S><font color="#7799ff">配套资料</font>:视觉SLAM十四讲书籍</S></p>
<p> <S>转眼来到了 <font color="#ff7700">2020/08/12 </font></S></p>
<hr />

<p><font color="#ff7700">2 Day</font>: 王道考研的计算机操作系统课程 68节课，并背诵ppt, 串联知识点。</p>
<p><font color="#7799ff">配套资料</font>:西电操作系统</p>
<p>转眼来到了 <font color="#ff7700">2020/08/14</font></p>
<hr />

<p><font color="#ff7700">2 Day</font>: 王道考研的计算机网络课程 74节课，并背诵ppt, 串联知识点。</p>
<p><font color="#7799ff">配套资料</font>：西电网络课本</p>
<p>转眼来到了 <font color="#ff7700">2020/08/16</font></p>
<hr />

<p><font color="#ff7700">2 Day</font>: MIT的线性代数课程35节课，并背诵宋浩老师的ppt, 串联知识点。</p>
<p><font color="#7799ff">配套资料</font>:西工大线性代数教材</p>
<p>转眼来到了 <font color="#ff7700">2020/08/18</font></p>
<hr /> 

<p><font color="#ff7700">2 Day</font>:宋浩老师的概率论与数理统计课程126节课，并背诵宋浩老师的ppt, 串联知识点。</p>
<p><font color="#7799ff">配套资料</font>:高等教育概率论教材</p>
<p>转眼来到了 <font color="#ff7700">2020/08/20</font></p>
<hr />

<p><font color="#ff7700">2 Day</font>:复习离散数学，计算机组成原理，编译原理，数据库的基本概念。</p>
<p><font color="#7799ff">配套资料</font>:西电离散数学，计组唐朔飞，</p>
<p>转眼来到了 <font color="#ff7700">2020/08/22</font></p>
<hr />

<p><font color="#ff7700">4 Day</font>: 刷题，并总结算法，凝练语言</p>
<p><font color="#7799ff">配套资料</font>:编程之美，剑指offer，LEETCODE，百炼OJ，<a href="http://www.noobdream.com/">http://www.noobdream.com/</a></p>
<p>转眼来到了 <font color="#ff7700">2020/08/26</font></p>
<p>关注九推，疯狂报名</p>
]]></content>
      <tags>
        <tag>冲刺研究生</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理</title>
    <url>/2020/08/06/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 今天早上初赛结束，所以就休息了一天，在宿舍躺尸了一天。所以顺便想看下C++内存管理的部分，想把这个东西弄得比较透彻吧，今天的内容属于开个头。因为类似的学习文希望显示得优先级高一些，所以就修改了 js 文件，添加了文章优先级排序。</p>
<a id="more"></a>

<h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="books.png"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">1. </font>相关书籍</div> </center>

<h2 id="People"><a href="#People" class="headerlink" title="People"></a>People</h2><ul>
<li>${Doug}$ ${Lea}$</li>
</ul>
<h2 id="classes"><a href="#classes" class="headerlink" title="classes"></a>classes</h2><ul>
<li>侯捷：<a href="https://www.bilibili.com/video/BV1Kb411B7N8">https://www.bilibili.com/video/BV1Kb411B7N8</a></li>
</ul>
<h2 id="Study-Note"><a href="#Study-Note" class="headerlink" title="Study Note"></a>Study Note</h2><p>&nbsp; &nbsp; 因为要去学内存管理，所以肯定要了解要调用什么去管理，而这些函数或者是关键字都是有层次关系的。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="memAlloc_layer.png"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">2. </font>不同层次的分配</div> </center>

<p>&nbsp; &nbsp; 而作为一名一直使用c++的小coder ,我一般使用的就是 ${\small cpp}$  ${\small permitives}$ 部分，具体相关函数及特性如下。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="memAlloc_primitive.png"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">3. </font>C++ primitive</div> </center>

<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="Sample1.png"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">4. </font>所有的内存分配方式测例</div> </center>

<p>&nbsp; &nbsp; 这几个层次之间的关系之前的图说的比较清楚，但是一般程序员嘛，看不到源码不死心，所以看一下 ${\small  new}$ 的源码。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="new_oriCode.png"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">5. </font>new函数源码</div> </center>

<p>其中调用了 ${\small operator new}$  这个函数,是在这个函数里面调用了 ${\small malloc}$ 函数。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="operator_new.png"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">6. </font>operator new函数源码</div> </center>



<p>&nbsp; &nbsp; ${\small delete}$ 函数类似，最终调用了 ${\small free}$ 函数。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="delete_oricode.png"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">7. </font>delete函数源码</div> </center>

<p>&nbsp; &nbsp; ${\small new}$ 中使用了${\small new}$出来的变量显式调用构造函数的表达式。这个表达式作为程序员是不能调用的，但是程序员可以显式调用析构函数。</p>
<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="构造.png"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">8. </font>构造函数不可显式调用</div> </center>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Memory Mangement</tag>
      </tags>
  </entry>
  <entry>
    <title>文章置顶</title>
    <url>/2020/08/07/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 添加文章置顶功能，但是在安装卸载渲染引擎后会<font color="#ff7700">失效</font>。</p>
<a id="more"></a>

<p>手动改js: <a href="https://www.jianshu.com/p/42a4efcdf8d7">https://www.jianshu.com/p/42a4efcdf8d7</a></p>
<p>然后修改渲染：<a href="https://blog.csdn.net/qwerty200696/article/details/79010629">https://blog.csdn.net/qwerty200696/article/details/79010629</a></p>
]]></content>
      <tags>
        <tag>日常维护</tag>
      </tags>
  </entry>
  <entry>
    <title>每日记录-2020/07/31</title>
    <url>/2020/07/31/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95-2020-07-31/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 果然还是没能早点起来。。。。9：20</p>
<a id="more"></a>

<p><img src="1.png" alt="1"></p>
<h2 id="今天做了什么"><a href="#今天做了什么" class="headerlink" title="今天做了什么"></a>今天做了什么</h2><ul>
<li><p><font color="#0099ff">Compiler</font></p>
<p><img src="2.png" alt="图着色"></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    CLion的使用</span></span><br><span class="line"><span class="comment">    树莓派的调整</span></span><br><span class="line"><span class="comment">    继续图着色算法</span></span><br><span class="line"><span class="comment">    看的差不多懂了ARM汇编</span></span><br><span class="line"><span class="comment">    帮忙找了两个bug,会了怎么修改</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#ff6622">TeamViewer没法链接</font></li>
</ul>
]]></content>
      <tags>
        <tag>Daily Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>每日记录-2020/08/01</title>
    <url>/2020/08/01/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95-2020-08-01/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 今天早上参加了北大的一个老师的面试，叫做李源老师，问了一下现在在哪里，在干什么，比赛的细节，然后问了本科阶段比赛的经历，比赛的算法的细节，最后问了读博读硕的想法，接下来就该解晓东老师的面试了。</p>
<a id="more"></a>

<h1 id="每日总结"><a href="#每日总结" class="headerlink" title="每日总结"></a><font color="#19CAAD">每日总结</font></h1><h2 id="今天做了什么"><a href="#今天做了什么" class="headerlink" title="今天做了什么"></a><font color="#BEE7E9">今天做了什么</font></h2><ul>
<li><font color="#0099ff">Compiler</font></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">今天全天都在找bug</span></span><br><span class="line"><span class="comment">1. return 不对</span></span><br><span class="line"><span class="comment">2. 叶子函数判断不正确</span></span><br><span class="line"><span class="comment">。。。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><font color="#ff6622">HEXO PDF的处理</font>,现在谷歌云盘还是不行，被主动拒绝了</li>
<li><font color="#ff6622">HEXO尝试了一下动漫小人物，但是没法切换，所以卸载了</font></li>
<li><font color="#ff3344">英文的简历</font></li>
</ul>
<h2 id="今日花费"><a href="#今日花费" class="headerlink" title="今日花费"></a><font color="#BEE7E9">今日花费</font></h2><ul>
<li>早饭  4.3</li>
<li>午饭  9.6（饭）+3（雪糕）</li>
<li>晚饭  2.5+3.7</li>
</ul>
<h2 id="明天最想做的事情"><a href="#明天最想做的事情" class="headerlink" title="明天最想做的事情"></a><font color="#BEE7E9">明天最想做的事情</font></h2><p>首先是<strong>早起</strong>，早起做<strong>slam</strong></p>
]]></content>
      <tags>
        <tag>Daily Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>每日记录-2020/08/02</title>
    <url>/2020/08/02/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95-2020-08-02/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 今天改了一天代码，早上洗了一早上衣服，然后下午主要是想看下struct释放内存的操作，但是不太对，然后就释放了几个函数内的局部malloc，然而并没有改变测评还是CE的局面。晚上自己写了matrix_add的测试用例，发现了一个立即数的bug，但是还是没有什么影响。</p>
<a id="more"></a>

<h2 id="修改的错误"><a href="#修改的错误" class="headerlink" title="修改的错误"></a><font color="#BEE7E9">修改的错误</font></h2><ol>
<li><p><font color="#ff6622">这个是自己写测试样例发现的错误</font></p>
<ul>
<li>具体如图：</li>
</ul>
<p><img src="1.png" alt="1"></p>
<ul>
<li><p>具体修改代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* codegen.cpp */</span></span><br><span class="line"><span class="keyword">if</span>(i &lt; <span class="number">200</span> &amp;&amp; i&gt;<span class="number">-200</span>)&#123;</span><br><span class="line">       <span class="built_in">sprintf</span>(inst, <span class="string">&quot;\tstr     &#x27;s0, [&#x27;s1, #%d]\n&quot;</span>, i);</span><br><span class="line">       emit(AS_Oper(inst, <span class="literal">NULL</span>, L(munchExp(e2), L(munchExp(e1), <span class="literal">NULL</span>)), <span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    Temp_temp r1 = Temp_newTemp();</span><br><span class="line">    <span class="built_in">sprintf</span>(inst, <span class="string">&quot;\tldr     &#x27;d0, =%d\n&quot;</span>, i);</span><br><span class="line">    emit(AS_Oper(inst, L(r1,<span class="literal">NULL</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">sprintf</span>(inst2, <span class="string">&quot;\tstr     &#x27;s0, [&#x27;s1, &#x27;s2]\n&quot;</span>);</span><br><span class="line">    emit(AS_Oper(inst2, <span class="literal">NULL</span>, L(munchExp(e2), L(munchExp(e1) , L(r1,<span class="literal">NULL</span>))), <span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改后结果</p>
</li>
</ul>
<p><img src="2.png" alt="2"></p>
<ol start="2">
<li><p><font color="#ff6622">针对上一个问题的修改</font></p>
<ul>
<li>参考</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 曾老师给的参考代码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    加载立即数 ldr r0,=#100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ILoc::load_imm</span><span class="params">(<span class="built_in">string</span> rsReg, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PlatformArm::constExpr(num)) &#123;</span><br><span class="line">        <span class="comment">// mov r8,#12</span></span><br><span class="line">        emit(<span class="string">&quot;mov&quot;</span>, rsReg, toStr(num));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// ldr r8,=0xfff0</span></span><br><span class="line">        load_label(rsReg, toStr(num, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PlatformArm::constExpr(off)) &#123;</span><br><span class="line">        <span class="comment">// sub sp,sp,#16</span></span><br><span class="line">        emit(<span class="string">&quot;sub&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;sp&quot;</span>, toStr(off));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//ldr r8,=257</span></span><br><span class="line">        load_imm(tmpReg, off);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sub sp,sp,r8</span></span><br><span class="line">        emit(<span class="string">&quot;sub&quot;</span>, <span class="string">&quot;sp&quot;</span>, <span class="string">&quot;sp&quot;</span>, tmpReg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    循环左移两位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PlatformArm::roundLeftShiftTwoBit</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> overFlow = num &amp; <span class="number">0xc0000000</span>;<span class="comment">//取左移即将溢出的两位</span></span><br><span class="line">    num = (num &lt;&lt; <span class="number">2</span>) | (overFlow &gt;&gt; <span class="number">30</span>);<span class="comment">//将溢出部分追加到尾部</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    判断num是否是常数表达式，8位数字循环右移偶数位得到</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">bool</span> PlatformArm::__constExpr(<span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> new_num = (<span class="keyword">unsigned</span> <span class="keyword">int</span>) num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (new_num &lt;= <span class="number">0xff</span>) &#123;</span><br><span class="line">            <span class="comment">// 有效表达式</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环左移2位</span></span><br><span class="line">        roundLeftShiftTwoBit(new_num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    同时处理正数和负数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PlatformArm::constExpr</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> __constExpr(num) || __constExpr(-num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>实际处理</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//codegen.cpp 70-106</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    循环左移两位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">roundLeftShiftTwoBit</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> overFlow = num &amp; <span class="number">0xc0000000</span>;<span class="comment">//取左移即将溢出的两位</span></span><br><span class="line">    num = (num &lt;&lt; <span class="number">2</span>) | (overFlow &gt;&gt; <span class="number">30</span>);<span class="comment">//将溢出部分追加到尾部</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    判断num是否是8位可放的，8位数字循环右移偶数位得到</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">bool</span> __constExpr(<span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> new_num = (<span class="keyword">unsigned</span> <span class="keyword">int</span>) num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (new_num &lt;= <span class="number">0xff</span>) &#123;</span><br><span class="line">            <span class="comment">// 有效表达式</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环左移2位</span></span><br><span class="line">        roundLeftShiftTwoBit(new_num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    同时处理正数和负数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">constExpr</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> __constExpr(num) || __constExpr(-num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//codegen.cpp 124-133</span></span><br><span class="line"><span class="keyword">if</span>(constExpr(i))&#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(inst, <span class="string">&quot;\tldr     &#x27;d0, [&#x27;s0, #%d]\n&quot;</span>, i);</span><br><span class="line">    emit(AS_Oper(inst, L(r, <span class="literal">NULL</span>), L(munchExp(e1), <span class="literal">NULL</span>), <span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(inst,<span class="string">&quot;\tldr     &#x27;d0,=%d\n&quot;</span>,i);</span><br><span class="line">    emit(AS_Oper(inst, L(r, <span class="literal">NULL</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">sprintf</span>(inst2, <span class="string">&quot;\tldr     &#x27;d0, [&#x27;s0, &#x27;d0]\n&quot;</span>);</span><br><span class="line">    emit(AS_Oper(inst2,L(r,<span class="literal">NULL</span>),L(munchExp(e1),<span class="literal">NULL</span>),<span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><font color="#ff6622">修复字节长度warning</font></p>
<p><img src="3.png" alt="3"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\13948\Desktop\C0\Compiler_GIT\liveness.cpp: In <span class="keyword">function</span> <span class="string">&#x27;void solveLiveness(Live_graph*, G_graph, G_table, G_table)&#x27;</span>:</span><br><span class="line">C:\Users\13948\Desktop\C0\Compiler_GIT\liveness.cpp:149:49: warning: cast to pointer from <span class="built_in">integer</span> of different size [-Wint-to-pointer-cast]</span><br><span class="line">             Temp_enterPtr(spillCost, ti, (void*)spills);</span><br><span class="line">                                                 ^~~~~~</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//liviness.cpp</span></span><br><span class="line"><span class="keyword">long</span> spills  ==&gt;  <span class="keyword">long</span> <span class="keyword">long</span> spills</span><br><span class="line"><span class="keyword">void</span>* 为<span class="number">8</span>个字节</span><br></pre></td></tr></table></figure>





</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>Daily Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>每日记录-2020-08-03</title>
    <url>/2020/08/03/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95-2020-08-03/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 今天起来得特别早，主要就是倩倩今天第一天上班嘞，我怕她一个人早上坐车比较害怕，所以我就早点起来，万一说害怕了给我打电话我也能接上。上周五我的湖盐发债上市了，然后截止到上周五收盘赚了160.6，看看这次能赚多少, hhh。起的太早了，脑子还是有点蒙的。</p>
<p>&nbsp; &nbsp; 今天想做的任务有先看怎么释放结构体等的内存，然后查时间看TLE。</p>
<a id="more"></a>

<p><img src="1.png" alt="1"></p>
<h2 id="ADD-HEXO：在线聊天Tidio"><a href="#ADD-HEXO：在线聊天Tidio" class="headerlink" title="ADD HEXO：在线聊天Tidio"></a><font color="#BEE7E9">ADD HEXO：在线聊天Tidio</font></h2><ol>
<li><p><font color="#ff6622">代码</font></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># themes/next/config.yml 214-221</span></span><br><span class="line"><span class="comment"># A button to open designated chat widget in sidebar.</span></span><br><span class="line"><span class="comment"># Firstly, you need enable the chat service you want to activate its sidebar button.</span></span><br><span class="line"><span class="attr">chat:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#service: chatra</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">tidio</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-comment</span> <span class="comment"># Icon name in Font Awesome, set false to disable icon.</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">Chat</span> <span class="comment"># Button text, change it as you wish.</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
   <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># themes/next/config.yml 766-771</span></span><br><span class="line"><span class="comment"># Tidio Support</span></span><br><span class="line"><span class="comment"># See: https://www.tidiochat.com</span></span><br><span class="line"><span class="comment"># Dashboard: https://www.tidiochat.com/panel/dashboard</span></span><br><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">xhf2buz63zl56r6o3xy4hkep9gznwevf</span> <span class="comment"># Public Key, get it from dashboard. See: https://www.tidiochat.com/panel/settings/developer</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><font color="#ff6622">实现效果</font></li>
</ol>
<ul>
<li><p><font color="#ff8899">侧栏</font></p>
<p><img src="2.png" alt="2"></p>
</li>
<li><p><font color="#ff8899">右下角聊天框</font></p>
<p><img src="3.png" alt="3"></p>
</li>
</ul>
<h2 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a><font color="#BEE7E9">Compiler</font></h2><p>&nbsp; &nbsp;  今天把regalloc 和 color彻底盘了一遍，没有任何问题。在修改了codegen和arm_frame的问题之后，终于呀终于呀把功能测试AC了</p>
<p><img src="4.png" alt="4"></p>
<p><img src="5.png" alt="5"></p>
]]></content>
      <tags>
        <tag>Daily Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>今日记录-2020-08-05</title>
    <url>/2020/08/05/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95-2020-08-05/</url>
    <content><![CDATA[<p>&nbsp; &nbsp;又是调 Compiler bug的一天呢~</p>
<a id="more"></a>

<p> <img src="1.jpg" alt="1"></p>
<p>唉，从昨天下午开始，倩倩就不理我了</p>
]]></content>
      <tags>
        <tag>Daily Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>每日记录</title>
    <url>/2020/07/30/%E6%AF%8F%E6%97%A5%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="2020-7-30"><a href="#2020-7-30" class="headerlink" title="2020/7/30"></a>2020/7/30</h1><h2 id="去过的地方"><a href="#去过的地方" class="headerlink" title="去过的地方"></a>去过的地方</h2><ul>
<li>计算机学院楼</li>
<li>云天苑餐厅</li>
<li>宿舍</li>
</ul>
<h2 id="今天做了什么"><a href="#今天做了什么" class="headerlink" title="今天做了什么"></a>今天做了什么</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Compiler的图着色算法</span></span><br><span class="line"><span class="comment">// 部署了Hexo,设置了一些细节，评论功能，侧栏，页脚等</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;hello&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="明天最想做的事情"><a href="#明天最想做的事情" class="headerlink" title="明天最想做的事情"></a>明天最想做的事情</h2><p>早起！</p>
<p><img src="1.png" alt="1"></p>
]]></content>
      <tags>
        <tag>Daily Summary</tag>
      </tags>
  </entry>
  <entry>
    <title>英语短文翻译-2020-08-09</title>
    <url>/2020/08/09/%E8%8B%B1%E8%AF%AD%E7%9F%AD%E6%96%87%E7%BF%BB%E8%AF%91-2020-08-09/</url>
    <content><![CDATA[<html>
<head>
    <meta charset="UTF-8">
    <title>Title</title>
<style>
        .wrap{
            margin:0 auto;
            width:100%;
        }
        #left{
            width:400px;
            height:800px;
            background: #ccffff;
            float: left;
        }
        #right{
            height: 800px;
            background: #ffcccc;
            margin-left:50px;
        }
    </style>

</head>
<body>
<div class="wrap">
    <aside id="left">
        <p font-family:"Fira Code";>
Abstract: Augmented reality (AR) is a technique that allows to seamlessly composite virtual objects or information into real scene. Compared to traditional text, images and videos, AR is a more effective and intuitive way for
information presentation and has wide applications. Simultaneous localization and mapping (SLAM) is a key
fundamental technique for augmented reality, which provides the ability of self-localization in an unknown environment and mapping the 3D environment simultaneously. The localization and mapping enables fusion of virtual
objects and real scenes in a geometrically consistent way. In this paper, we describe the basic principles of Visual
SLAM, and introduce some state-of-the-art monocular SLAM methods with deep analysis and comparison. Finally, we discuss some research tendency in recent years and make conclusions. 
        </p>
    </aside>
    <section id="right">
        <p>
   摘 要: 增强现实是一种在现实场景中无缝地融入虚拟物体或信息的技术, 能够比传统的文字、图像和视频等方式
更高效、直观地呈现信息，有着非常广泛的应用. 同时定位与地图构建作为增强现实的关键基础技术, 可以用来在未
知环境中定位自身方位并同时构建环境三维地图, 从而保证叠加的虚拟物体与现实场景在几何上的一致性. 文中首
先简述基于视觉的同时定位与地图构建的基本原理; 然后介绍几个代表性的基于单目视觉的同时定位与地图构建方
法并做深入分析和比较; 最后讨论近年来研究热点和发展趋势, 并做总结和展望. 
        </p>
    </section>
</div>
</body>

</html>

]]></content>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>韩国比赛</title>
    <url>/2020/08/03/%E9%9F%A9%E5%9B%BD%E6%AF%94%E8%B5%9B-2019-08-05/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 我认为最难的竞赛是无人机平台下的无人机竞速比赛。这个比赛的目的是为了构建一个能够用于3D赛道上基于视觉的自动导航系统，完成的功能有巡航，避障，起飞降落，检测特征点等。这个比赛的难点有电脑端与无人机端的数据交互，这个我们是基于Ros的框架进行的，对这个框架的学习，包括通信机制，节点管理等，主要是通过ROS的教程与样例完成学习，然后统一制定一个规范，保证代码风格的统一。另外在避障方面，主要是处理场外干扰的因素，然后另外要区分障碍的深度问题。在起飞降落中，主要做的是顺滑平稳，采用了PID的控制方法和YOLO框架来识别降落点。</p>
<p>&nbsp; &nbsp; 到了真正的比赛场地，实际遇到的问题是这个信息交互是通过wifi实现的，但是比赛场地wifi信号多而杂，会导致图传等问题有延迟卡顿，我们解决的主要方式是先讨论一下其他连接方式，蓝牙，Zigbee等，确定短时间内无法更换或无法满足需求；然后希望能够增强自己的wifi信号来达到目的，稳定性不强；最后看了wifi相关参数，发现wifi频段和信道问题的影响，现在绝大多数设备的wifi频段集中于2.4G，而我们只要电脑和无人机都wifi的支持5G频段即可避免信道冲突，达到目的。另外有光流漂移的问题，主要是通过增加光流标志点实现的。</p>
<p><font color="#ff7700">(含比赛视频)</font></p>
<a id="more"></a>

<div style="position: relative; width: 85%; height: 0; padding-bottom: 75%;"><iframe 
src="https://www.bilibili.com/video/BV1LK411n7E5/" scrolling="no" border="0" 
frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;"> </iframe></div>

]]></content>
      <categories>
        <category>Competition</category>
        <category>UAV</category>
      </categories>
  </entry>
  <entry>
    <title>风景速写画(一)</title>
    <url>/2020/10/27/%E9%A3%8E%E6%99%AF%E9%80%9F%E5%86%99%E7%94%BB-%E4%B8%80/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; 风景速写练习。。。。</p>
<a id="more"></a>

<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="1.jpg"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">1. </font>2020/10/20</div> </center>

<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="2.jpg"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">2. </font>2020/10/22</div> </center>

<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="3.jpg"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">3. </font>2020/10/24</div> </center>

<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="4.jpg"><div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"><font color="#ff7700">4. </font>2020/10/27</div> </center>]]></content>
      <categories>
        <category>Drawing</category>
        <category>Pencil</category>
      </categories>
      <tags>
        <tag>速写</tag>
        <tag>绘画</tag>
        <tag>兴趣爱好</tag>
      </tags>
  </entry>
</search>
